[gd_resource type="ShaderMaterial" load_steps=56 format=3 uid="uid://rhmyhuveb7yv"]

[ext_resource type="Script" path="res://addons/TerrainPlugin/Shader/VisualShaderNodeTerrainGenerator3D.gd" id="1"]
[ext_resource type="Script" path="res://addons/TerrainPlugin/Shader/VisualShaderNodeAntiTiling3D.gd" id="2"]
[ext_resource type="Script" path="res://addons/TerrainPlugin/Shader/VisualShaderNodeDepthBlending3D.gd" id="3"]
[ext_resource type="Script" path="res://addons/TerrainPlugin/Shader/VisualShaderNodeTextureUnpack3D.gd" id="4"]
[ext_resource type="Script" path="res://addons/TerrainPlugin/Shader/VisualShaderNodeTerrainMaterial3D.gd" id="5"]
[ext_resource type="Script" path="res://addons/TerrainPlugin/Shader/VisualShaderNodeUVMultiply3D.gd" id="6"]
[ext_resource type="Script" path="res://addons/TerrainPlugin/Shader/VisualShaderNodeSplatmapHeight3D.gd" id="7"]
[ext_resource type="Texture2D" uid="uid://63e32iphi2js" path="res://addons/TerrainPlugin/TestTextures/Grass/Ground037_2K_Color.jpg" id="8"]
[ext_resource type="Texture2D" uid="uid://cdrbyssh4g2nw" path="res://addons/TerrainPlugin/TestTextures/Grass/Ground037_2K_AmbientOcclusion.jpg" id="9"]
[ext_resource type="Texture2D" uid="uid://cv2xcvofugp3w" path="res://addons/TerrainPlugin/TestTextures/Grass/Ground037_2K_Displacement.jpg" id="10"]
[ext_resource type="Texture2D" uid="uid://cqim8gwagexie" path="res://addons/TerrainPlugin/TestTextures/Grass/Ground037_2K_Normal.jpg" id="11"]
[ext_resource type="Texture2D" uid="uid://dv8kyo1tvosho" path="res://addons/TerrainPlugin/TestTextures/Grass/Ground037_2K_Roughness.jpg" id="12"]
[ext_resource type="Texture2D" uid="uid://dvywje0f16gnb" path="res://addons/TerrainPlugin/TestTextures/Sandy/Ground022_2K_Displacement.jpg" id="13"]
[ext_resource type="Texture2D" uid="uid://bttutb4ikmdmp" path="res://addons/TerrainPlugin/TestTextures/Sandy/Ground022_2K_AmbientOcclusion.jpg" id="14"]
[ext_resource type="Texture2D" uid="uid://c7oshl33rb05h" path="res://addons/TerrainPlugin/TestTextures/Sandy/Ground022_2K_Normal.jpg" id="15"]
[ext_resource type="Texture2D" uid="uid://f23bbnwha0lv" path="res://addons/TerrainPlugin/TestTextures/Sandy/Ground022_2K_Roughness.jpg" id="16"]
[ext_resource type="Texture2D" uid="uid://d1as6ccdmd65o" path="res://addons/TerrainPlugin/TestTextures/Sandy/Ground022_2K_Color.jpg" id="17"]
[ext_resource type="Texture2D" uid="uid://ce01x0tgv2wc3" path="res://addons/TerrainPlugin/TestTextures/Pave/PavingStones046_2K_Normal.jpg" id="18"]
[ext_resource type="Texture2D" uid="uid://ct6swwoan26s6" path="res://addons/TerrainPlugin/TestTextures/Pave/PavingStones046_2K_Displacement.jpg" id="19"]
[ext_resource type="Texture2D" uid="uid://ctu5yilyyc8ng" path="res://addons/TerrainPlugin/TestTextures/Pave/PavingStones046_2K_Color.jpg" id="20"]
[ext_resource type="Texture2D" uid="uid://cs2sw16r2e4y8" path="res://addons/TerrainPlugin/TestTextures/Pave/PavingStones046_2K_Roughness.jpg" id="21"]
[ext_resource type="Texture2D" uid="uid://ujhqeonma8kj" path="res://addons/TerrainPlugin/TestTextures/Pave/PavingStones046_2K_AmbientOcclusion.jpg" id="22"]

[sub_resource type="VisualShaderNodeTextureUniform" id="1"]
default_input_values = []
expanded_output_ports = []
uniform_name = "Layer_2_Rough"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureUniform" id="2"]
default_input_values = []
expanded_output_ports = []
uniform_name = "Layer_2_Normal"
texture_type = 2

[sub_resource type="VisualShaderNodeTextureUniform" id="3"]
default_input_values = []
expanded_output_ports = []
uniform_name = "Layer_2_Dis"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureUniform" id="4"]
default_input_values = []
expanded_output_ports = []
uniform_name = "Layer_2"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureUniform" id="5"]
default_input_values = []
expanded_output_ports = []
uniform_name = "Layer_3_Dis"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureUniform" id="6"]
default_input_values = []
expanded_output_ports = []
uniform_name = "Layer_3_Normal"
texture_type = 2

[sub_resource type="VisualShaderNodeTextureUniform" id="7"]
default_input_values = []
expanded_output_ports = []
uniform_name = "Layer_3_Rough"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureUniform" id="8"]
default_input_values = []
expanded_output_ports = []
uniform_name = "Layer_3_AO"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureUniform" id="9"]
default_input_values = []
expanded_output_ports = []
uniform_name = "Layer_3"
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="10"]
default_input_values = [5, Vector3(0, 0, 0), 6, 0.5, 7, 1.0, 8, 0.0]
expanded_output_ports = []
initialized = true
script = ExtResource( "2" )

[sub_resource type="VisualShaderNodeTextureUniform" id="11"]
default_input_values = []
expanded_output_ports = []
uniform_name = "Layer_1_Dis"
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="12"]
default_input_values = [5, Vector3(0, 0, 0), 6, 0.5, 7, 1.0, 8, 0.0]
expanded_output_ports = []
initialized = true
script = ExtResource( "2" )

[sub_resource type="VisualShaderNodeCustom" id="13"]
default_input_values = [5, Vector3(0, 0, 0), 6, 0.5, 7, 1.0, 8, 0.0]
expanded_output_ports = []
initialized = true
script = ExtResource( "2" )

[sub_resource type="VisualShaderNodeCustom" id="14"]
default_input_values = [0, Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0), 1, Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0), 2, 0.5, 3, 0.05, 4, false]
expanded_output_ports = []
initialized = true
script = ExtResource( "3" )

[sub_resource type="VisualShaderNodeCustom" id="15"]
default_input_values = [0, Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0), 1, Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0), 2, 0.5, 3, 0.05, 4, false]
expanded_output_ports = []
initialized = true
script = ExtResource( "3" )

[sub_resource type="VisualShaderNodeCustom" id="16"]
default_input_values = [0, Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)]
expanded_output_ports = []
initialized = true
script = ExtResource( "4" )

[sub_resource type="VisualShaderNodeCustom" id="17"]
default_input_values = [0, Vector3(1, 1, 0)]
expanded_output_ports = []
initialized = true
script = ExtResource( "6" )

[sub_resource type="VisualShaderNodeCustom" id="18"]
default_input_values = []
expanded_output_ports = []
initialized = true
script = ExtResource( "5" )

[sub_resource type="VisualShaderNodeFloatConstant" id="19"]
default_input_values = []
expanded_output_ports = []
constant = 1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="20"]
default_input_values = []
expanded_output_ports = []
constant = 1.0

[sub_resource type="VisualShaderNodeTextureUniform" id="21"]
default_input_values = []
expanded_output_ports = []
uniform_name = "Layer_1_Normal"
texture_type = 2

[sub_resource type="VisualShaderNodeFloatConstant" id="22"]
default_input_values = []
expanded_output_ports = []

[sub_resource type="VisualShaderNodeFloatConstant" id="23"]
default_input_values = []
expanded_output_ports = []
constant = 0.02

[sub_resource type="VisualShaderNodeVec3Constant" id="24"]
default_input_values = []
expanded_output_ports = []
constant = Vector3(75, 75, 75)

[sub_resource type="VisualShaderNodeCustom" id="25"]
default_input_values = []
expanded_output_ports = []
initialized = true
script = ExtResource( "7" )

[sub_resource type="VisualShaderNodeFloatConstant" id="26"]
default_input_values = []
expanded_output_ports = []
constant = 1.0

[sub_resource type="VisualShaderNodeTextureUniform" id="28"]
default_input_values = []
expanded_output_ports = []
uniform_name = "Layer_1"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureUniform" id="29"]
default_input_values = []
expanded_output_ports = []
uniform_name = "Layer_1_Rough"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureUniform" id="30"]
default_input_values = []
expanded_output_ports = []
uniform_name = "Layer_1_AO"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureUniform" id="31"]
default_input_values = []
expanded_output_ports = []
uniform_name = "Layer_2_AO"
texture_type = 1

[sub_resource type="VisualShaderNodeVec3Constant" id="32"]
default_input_values = []
expanded_output_ports = []
constant = Vector3(0.5, 0.5, 0.5)

[sub_resource type="VisualShaderNodeCustom" id="33"]
default_input_values = [0, Vector3(0, 0, 0)]
expanded_output_ports = []
script = ExtResource( "1" )

[sub_resource type="VisualShader" id="34"]
code = "shader_type spatial;
render_mode depth_draw_always;

uniform sampler2D Layer_1 : hint_albedo;
uniform sampler2D Layer_1_Dis : hint_albedo;
uniform sampler2D Layer_1_Normal : hint_normal;
uniform sampler2D Layer_1_Rough : hint_albedo;
uniform sampler2D Layer_1_AO : hint_albedo;
uniform sampler2D Layer_2 : hint_albedo;
uniform sampler2D Layer_2_Dis : hint_albedo;
uniform sampler2D Layer_2_Normal : hint_normal;
uniform sampler2D Layer_2_Rough : hint_albedo;
uniform sampler2D Layer_2_AO : hint_albedo;
uniform sampler2D Layer_3 : hint_albedo;
uniform sampler2D Layer_3_Dis : hint_albedo;
uniform sampler2D Layer_3_Normal : hint_normal;
uniform sampler2D Layer_3_Rough : hint_albedo;
uniform sampler2D Layer_3_AO : hint_albedo;


// TerrainGenerator3D


		uniform vec4 terrainUvScale;
		uniform vec2 terrainUvOffset;
		uniform sampler2D terrainHeightMap : filter_linear, repeat_disable;

		uniform float terrainChunkSize = 0;
		uniform float terrainNextLodChunkSize = 0;
		uniform vec4 terrainNeighborLod = vec4(0,0,0,0);
		uniform float terrainCurrentLodLevel = 0;
		uniform bool terrainSmoothing = false;
		
		uniform sampler2D terrainSplatmap1 : filter_linear, repeat_disable;
		uniform sampler2D terrainSplatmap2 : filter_linear, repeat_disable;

		float calculateLOD(bool _smoothing, float _currentLod, vec4 _neighborLod, vec2 xy, vec4 morph)
		{
			if(_smoothing)
			{
				// Use LOD value based on Barycentric coordinates to morph to the lower LOD near chunk edges
				vec4 lodCalculated = morph * _currentLod + _neighborLod * (vec4(1, 1, 1, 1) - morph);

				// Pick a quadrant (top, left, right or bottom)
				float lod;
				if ((xy.x + xy.y) > 1.0)
				{
					if (xy.x < xy.y)
					{
						lod = lodCalculated.w;
					}
					else
					{
						lod = lodCalculated.z;
					}
				}
				else
				{
					if (xy.x < xy.y)
					{
						lod = lodCalculated.y;
					}
					else
					{
						lod = lodCalculated.x;
					}
				}

				return lod;
			}
			else
				return _currentLod;
		}

		mat3 CalcTangentBasisFromWorldNormal(vec3 normal)
		{
			vec3 tangenttest = cross(normal, vec3(1, 0, 0));
			vec3 bitangenttest = cross(normal, tangenttest);
			return mat3(tangenttest, bitangenttest, normal);
		}

		float getHeight(vec4 heightmapValue)
		{
			int heightR = int((heightmapValue.x * 255.0));
			int heightG = int((heightmapValue.y * 255.0)) << 8;

			int sum = heightR + heightG;
			return float(sum) / 65535.0;
		}

		vec3 getNormal(vec4 heightmapValue)
		{
			vec2 normalTemp = vec2(heightmapValue.b, heightmapValue.a) * 2.0f - 1.0f;

			float yNormalSaturated = clamp(dot(normalTemp, normalTemp), 0.0, 1.0);
			vec3 normal = vec3(normalTemp.x, sqrt(1.0 - yNormalSaturated), normalTemp.y);
			bool isHole = (heightmapValue.b + heightmapValue.a) >= 1.9f;
			normal = normalize(normal);

			if (isHole)
			{
				normal = vec3(0, 1, 0);
			}

			return normal;
		}

		vec3 getPosition(vec2 uv, float _terrainChunkSize, float _terrainCurrentLodLevel, bool _smoothing, float _terrainNextLodChunkSize, float lodCalculated)
		{
			float lodValue = _terrainCurrentLodLevel;
			vec2 positionXZ = vec2(0,0);

			if(_smoothing)
			{		
					vec2 nextLODPos = round(uv * _terrainNextLodChunkSize) / _terrainNextLodChunkSize;
					float morphAlpha = lodCalculated - _terrainCurrentLodLevel;

					vec2 positionXZThisLOD = uv * _terrainChunkSize;
					vec2 positionXZNextLOD = nextLODPos * _terrainChunkSize;
					positionXZ = mix(positionXZThisLOD, positionXZNextLOD, morphAlpha);
			}
			else {
				positionXZ = uv * _terrainChunkSize;
			}
			
			return vec3(positionXZ.x, 0f, positionXZ.y);
	
		}

		vec4 getHeightmap(vec2 uv, float _terrainChunkSize,  bool _smoothing, vec4 uv_scale, sampler2D heightmap, float morphAlpha, float _terrainNextLodChunkSize, float _currentLODLevel){

			vec2 heightmapUVs = uv * uv_scale.xy + uv_scale.zw;

			if(_smoothing)
			{

				//vec4 heightmapValueThisLOD = textureLod( heightmap, heightmapUVs, _currentLODLevel);
				vec4 heightmapValueThisLOD = texture( heightmap, heightmapUVs);
				vec2 nextLODPos = round(uv * _terrainNextLodChunkSize) / _terrainNextLodChunkSize;
				vec2 heightmapUVsNextLOD = nextLODPos * uv_scale.xy + uv_scale.zw;
				vec4 heightmapValueNextLOD = textureLod( heightmap, heightmapUVsNextLOD, _currentLODLevel + 1f);
				vec4 heightmapValue = mix(heightmapValueThisLOD, heightmapValueNextLOD, morphAlpha);

				return heightmapValue;
			}
			else {
				return textureLod(heightmap, heightmapUVs, _currentLODLevel);
			}
		}

		mat3 RemoveScaleFromLocalToWorld(mat3 localToWorld)
		{
			//localToWorld[0] *= WorldInvScale.x;
			//localToWorld[1] *= WorldInvScale.y;
			//localToWorld[2] *= WorldInvScale.z;

			return localToWorld;
		}

		mat3 CalcTangentToWorld(mat4 world, mat3 tangentToLocal)
		{
			mat3 localToWorld = RemoveScaleFromLocalToWorld(mat3(world));
			return  tangentToLocal * localToWorld; 
		}

	
// UVMultiply3D

	
	
// AntiTiling3D

		float rand(vec2 input) {
			return fract(sin(dot(input.xy, vec2(12.9898,78.233))) * 43758.5453123);
		}

		vec2 rotatedUV(vec2 uv, float tiling, float randomize_rotation)
		{
			vec2 tiled_UV_raw = uv * tiling;
			vec2 tiled_UV = fract(tiled_UV_raw) - 0.5f;
			
			vec2 unique_val = floor(uv * tiling) / tiling;
			float rotation = (rand(unique_val) * 2.0f - 1.0f) * randomize_rotation * 3.14f;
			float cosine = cos(rotation);
			float sine = sin(rotation);
			mat2 rotation_mat = mat2(vec2(cosine, -sine), vec2(sine, cosine));
			return rotation_mat * tiled_UV + 0.5f;
		}
		
	
// SplatmapHeight3D


		vec4 getSplatmap(vec2 uv, float _terrainChunkSize, vec4 uv_scale, sampler2D heightmap, float currentLODLevel){
			vec2 heightmapUVs = uv * uv_scale.xy + uv_scale.zw;

			float currentChunkSize = (_terrainChunkSize / 100f + 1f) * 4f;
			float extraPolate = 0.5f / currentChunkSize;
			heightmapUVs = heightmapUVs + vec2(extraPolate, extraPolate);

			return textureLod(heightmap, heightmapUVs, currentLODLevel);
		}
		
	
// DepthBlending3D


		vec3 HeightBlend(float blending, vec3 input1, float height1, vec3 input2, float height2)
		{
			float height_start = max(height1, height2) - blending;
			float b1 = max(height1 - height_start, 0f);
			float b2 = max(height2 - height_start, 0f);
			return ((input1 * b1) + (input2 * b2)) / (b1 + b2);
		}

		vec3 HeightLerp(float blending, vec3 input1, float height1, vec3 input2, float height2, float lerp)
		{
			return HeightBlend(blending, input1, height1 * (1f - lerp), input2, height2 * lerp);
		}

	
// TextureUnpack3D

	
	
// TerrainMaterial3D


		uniform vec4 BrushData0;
		uniform vec4 BrushData1;
		uniform vec4 BrushColor	 : hint_color;

		uniform sampler2D terrainDefaultMaterial : hint_albedo;


		vec3 genInspectorHighliteTerrain(vec4 brushColor, vec4 brushData0, vec4 brushData1, mat4 CAMMATRIX, vec3 vertexLocal)
		{
			float n_out12p0 = 0.000000;
			mat4 n_out6p0 =  CAMMATRIX;
			vec3 n_out7p0 = vertexLocal;
			vec3 n_out8p0 = (n_out6p0 * vec4(n_out7p0, 1.0)).xyz;

			vec3 n_out2p0 = BrushData0.rgb;
			float n_out2p1 = BrushData0.a;

			float n_out4p0 = distance(n_out8p0, n_out2p0);

			vec3 n_out3p0 = BrushData1.rgb;
			float n_out3p1 = BrushData1.a;

			float n_out10p0 = n_out3p0.x;
			float n_out10p1 = n_out3p0.y;
			float n_out10p2 = n_out3p0.z;

			float n_out9p0;
			n_out9p0 = 0.0;
			{
				float dist = n_out4p0;
				float radius = n_out2p1;
				float falloff = n_out10p0;
				float falloffType = n_out10p1;
				
				// Output0 = brush intensity
				n_out9p0 = 0f;
				
				if (dist < radius)
				{
					n_out9p0 = 1f;
				}
				else if (dist < radius + falloff)
				{
					float valueLinear = mix(1, 0, (dist - radius) / falloff);
					if (falloffType == 0f) // Smooth
						n_out9p0 = valueLinear * valueLinear * (3f - 2f * valueLinear);
					else if (falloffType == 1f) // Linear
						n_out9p0 = valueLinear;
					else if (falloffType == 2f) // Spherical
						n_out9p0 = sqrt(1.0f - ((dist - radius) / falloff) * (dist - radius) / falloff);
					else if (falloffType == 3f) // Tip
						n_out9p0 = 1.0f - sqrt(1.0f - ((falloff + radius - dist) / falloff) * (falloff + radius - dist) / falloff);
				}
				
			}

			float n_in11p1 = 0.20000;
			float n_out11p0 = mix(n_out12p0, n_in11p1, n_out9p0);

			vec3 n_out16p0 = vec3(0.968750, 1.000000, 0.000000);
			float n_out16p1 = 1.000000;

			float n_out15p0;
			n_out15p0 = 0f;
			{
				float Width = 7.0f;
				if (abs(n_out4p0) < Width || abs(n_out4p0 - n_out2p1) < Width)
					n_out15p0 = 1f;
				else if (abs(n_out4p0 - n_out2p1 - n_out10p0) < Width)
					n_out15p0 = 1f;
				else
					n_out15p0 = 0f;
				
			}

			float n_out19p0 = mix(n_out11p0, n_out16p1, n_out15p0);

			vec3 n_out13p0 = brushColor.rgb;
			float n_out13p1 = brushColor.a;

			float n_out20p0 = n_out19p0 * n_out13p1;

			vec3 n_out18p0 = vec3(n_out15p0, n_out15p0, n_out15p0);
			vec3 n_out17p0 = mix(n_out13p0, n_out16p0, n_out18p0);
			vec3 n_out22p0 = vec3(n_out13p1, n_out13p1, n_out13p1);

			vec3 n_out21p0 = n_out17p0 * n_out22p0;
			return mix(vec3(0f,0f,0f), n_out21p0, n_out20p0);
		}

	

void vertex() {
	vec3 n_out2p0;
	float n_out2p1;
	vec3 n_out2p2;
	vec3 n_out2p3;
	vec3 n_out2p4;
	float n_out2p5;
	float n_out2p6;
	vec3 n_out2p7;
// TerrainGenerator3D:2
	{
		float lodCalculated = calculateLOD(terrainSmoothing, terrainCurrentLodLevel, terrainNeighborLod, UV, COLOR);float lodValue = terrainCurrentLodLevel;float morphAlpha = lodCalculated - terrainCurrentLodLevel;vec4 heightMapValues = getHeightmap(UV, terrainChunkSize, terrainSmoothing, terrainUvScale, terrainHeightMap, morphAlpha,  terrainNextLodChunkSize,  terrainCurrentLodLevel);
		float height = getHeight(heightMapValues);
		vec3 position = getPosition(UV, terrainChunkSize, terrainCurrentLodLevel, terrainSmoothing, terrainNextLodChunkSize, lodCalculated);
		mat3 tangentToLocal = CalcTangentBasisFromWorldNormal(getNormal(heightMapValues));
		mat3 tangentToWorld = CalcTangentToWorld(WORLD_MATRIX, tangentToLocal);
		vec3 worldNormal = tangentToWorld[2];
		mat3 calculatedTBNWorld = CalcTangentBasisFromWorldNormal(worldNormal);
		position.y = height;
		n_out2p0 = position;
		n_out2p1 = height;
		n_out2p2 = calculatedTBNWorld[2];
		n_out2p3 = calculatedTBNWorld[0];
		n_out2p4 = calculatedTBNWorld[1];
		n_out2p5 = heightMapValues.r;
		n_out2p6 = heightMapValues.g;
		vec2 newUV = vec2(position.x, position.z) * (1.0f / terrainChunkSize) + terrainUvOffset;
		n_out2p7 = vec3(newUV.x, newUV.y, 0.0);
	}


// Output:0
	VERTEX = n_out2p0;
	NORMAL = n_out2p2;
	TANGENT = n_out2p3;
	BINORMAL = n_out2p4;


}

void fragment() {
// VectorConstant:33
	vec3 n_out33p0 = vec3(75.000000, 75.000000, 75.000000);


	vec3 n_out25p0;
// UVMultiply3D:25
	{
		vec2 scaled = UV * vec2(n_out33p0.x, n_out33p0.y);
		n_out25p0 = vec3(scaled.x, scaled.y, 0f);
	}


// FloatConstant:28
	float n_out28p0 = 1.000000;


	mat4 n_out19p0;
	mat4 n_out19p1;
// AntiTiling3D:19
	float n_in19p6 = 0.50000;
	float n_in19p7 = 1.00000;
	{
		vec4 colorMap = texture(Layer_1, n_out25p0.xy);
		vec4 dispMap = texture(Layer_1_Dis,  n_out25p0.xy);
		vec4 normalMap = texture(Layer_1_Normal,  n_out25p0.xy);
		vec4 roughMap = texture(Layer_1_Rough,  n_out25p0.xy);
		vec4 aoMap = texture(Layer_1_AO,  n_out25p0.xy);
		mat4 packedOriginal = mat4(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0));
		packedOriginal[0].rgb = colorMap.rgb;
		packedOriginal[1].r = dispMap.r;
		packedOriginal[2].rg = normalMap.rg;
		packedOriginal[3].r = roughMap.r;
		packedOriginal[3].b = aoMap.r;
		n_out19p1 = packedOriginal;
		vec2 newUv = rotatedUV(n_out25p0.xy, n_in19p7, n_in19p6);vec4 colorMapRot = texture(Layer_1, newUv);
		vec4 dispMapRot = texture(Layer_1_Dis,  newUv);
		vec4 normalMapRot = texture(Layer_1_Normal,  newUv);
		vec4 roughMapRot = texture(Layer_1_Rough,  newUv);
		vec4 aoMapRot = texture(Layer_1_AO,  newUv);
		mat4 packedMixed = mat4(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0));
		packedMixed[0].rgb = colorMapRot.rgb;
		packedMixed[1].r = dispMapRot.r;
		packedMixed[2].rg = normalMapRot.rg;
		packedMixed[3].r = roughMapRot.r;
		packedMixed[3].b = aoMapRot.r;
		packedMixed[0] = mix(packedOriginal[0], packedMixed[0],  n_out28p0);
		packedMixed[1] = mix(packedOriginal[1], packedMixed[1],  n_out28p0);
		packedMixed[2] = mix(packedOriginal[2], packedMixed[2],  n_out28p0);
		packedMixed[3] = mix(packedOriginal[3], packedMixed[3],  n_out28p0);
		n_out19p1 = packedOriginal;
		n_out19p0 = packedMixed;
	}


// FloatConstant:29
	float n_out29p0 = 1.000000;


	mat4 n_out20p0;
	mat4 n_out20p1;
// AntiTiling3D:20
	float n_in20p6 = 0.50000;
	float n_in20p7 = 1.00000;
	{
		vec4 colorMap = texture(Layer_2, n_out25p0.xy);
		vec4 dispMap = texture(Layer_2_Dis,  n_out25p0.xy);
		vec4 normalMap = texture(Layer_2_Normal,  n_out25p0.xy);
		vec4 roughMap = texture(Layer_2_Rough,  n_out25p0.xy);
		vec4 aoMap = texture(Layer_2_AO,  n_out25p0.xy);
		mat4 packedOriginal = mat4(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0));
		packedOriginal[0].rgb = colorMap.rgb;
		packedOriginal[1].r = dispMap.r;
		packedOriginal[2].rg = normalMap.rg;
		packedOriginal[3].r = roughMap.r;
		packedOriginal[3].b = aoMap.r;
		n_out20p1 = packedOriginal;
		vec2 newUv = rotatedUV(n_out25p0.xy, n_in20p7, n_in20p6);vec4 colorMapRot = texture(Layer_2, newUv);
		vec4 dispMapRot = texture(Layer_2_Dis,  newUv);
		vec4 normalMapRot = texture(Layer_2_Normal,  newUv);
		vec4 roughMapRot = texture(Layer_2_Rough,  newUv);
		vec4 aoMapRot = texture(Layer_2_AO,  newUv);
		mat4 packedMixed = mat4(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0));
		packedMixed[0].rgb = colorMapRot.rgb;
		packedMixed[1].r = dispMapRot.r;
		packedMixed[2].rg = normalMapRot.rg;
		packedMixed[3].r = roughMapRot.r;
		packedMixed[3].b = aoMapRot.r;
		packedMixed[0] = mix(packedOriginal[0], packedMixed[0],  n_out29p0);
		packedMixed[1] = mix(packedOriginal[1], packedMixed[1],  n_out29p0);
		packedMixed[2] = mix(packedOriginal[2], packedMixed[2],  n_out29p0);
		packedMixed[3] = mix(packedOriginal[3], packedMixed[3],  n_out29p0);
		n_out20p1 = packedOriginal;
		n_out20p0 = packedMixed;
	}


	float n_out34p0;
	float n_out34p1;
	float n_out34p2;
	float n_out34p3;
	float n_out34p4;
	float n_out34p5;
	float n_out34p6;
	float n_out34p7;
// SplatmapHeight3D:34
	{
		vec4 splatmap1Values = getSplatmap(UV, terrainChunkSize, terrainUvScale, terrainSplatmap1, terrainCurrentLodLevel);
		vec4 splatmap2Values = getSplatmap(UV, terrainChunkSize,  terrainUvScale, terrainSplatmap2, terrainCurrentLodLevel);
		n_out34p0 = splatmap1Values.r;
		n_out34p1 = splatmap1Values.g;
		n_out34p2 = splatmap1Values.b;
		n_out34p3 = splatmap1Values.a;
		n_out34p4 = splatmap2Values.r;
		n_out34p5 = splatmap2Values.g;
		n_out34p6 = splatmap2Values.b;
		n_out34p7 = splatmap2Values.a;
	}


// FloatConstant:31
	float n_out31p0 = 0.020000;


	mat4 n_out22p0;
// DepthBlending3D:22
	bool n_in22p4 = false;
	{
		vec3 tex1 = n_out19p0[0].rgb;
		vec3 tex2 = n_out20p0[0].rgb;
		float avg1 = (tex1.r + tex1.g + tex1.b) / 3.0f;
		float avg2 = (tex2.r + tex2.g + tex2.b) / 3.0f;
		vec3 bump1 = n_out19p0[2].rgb;
		vec3 bump2 = n_out20p0[2].rgb;
		bump1.xy = bump1.xy / bump1.z;
		bump2.xy = bump2.xy / bump2.z;
		bump1.z = 1.0;
		bump2.z = 1.0;
		if(n_in22p4 == false) { 
			avg1 = n_out19p0[1].r;
			avg2 = n_out20p0[1].r;
		}
		mat4 result = mat4(vec4(0f,0f,0f,0f),vec4(0f,0f,0f,0f),vec4(0f,0f,0f,0f),vec4(0f,0f,0f,0f));
		result[0].rgb = HeightLerp(n_out31p0, n_out19p0[0].rgb, avg1, n_out20p0[0].rgb, avg2, n_out34p3);
		result[1].rgb = HeightLerp(n_out31p0, n_out19p0[1].rgb, avg1, n_out20p0[1].rgb, avg2, n_out34p3);
		result[2].rgb = mix( n_out19p0[2].rgb,  n_out20p0[2].rgb, n_out34p3);
		result[3].rgb = HeightLerp(n_out31p0, n_out19p0[3].rgb, avg1, n_out20p0[3].rgb, avg2, n_out34p3);
		n_out22p0 = result;
	}


// FloatConstant:30
	float n_out30p0 = 0.000000;


	mat4 n_out21p0;
	mat4 n_out21p1;
// AntiTiling3D:21
	float n_in21p6 = 0.50000;
	float n_in21p7 = 1.00000;
	{
		vec4 colorMap = texture(Layer_3, n_out25p0.xy);
		vec4 dispMap = texture(Layer_3_Dis,  n_out25p0.xy);
		vec4 normalMap = texture(Layer_3_Normal,  n_out25p0.xy);
		vec4 roughMap = texture(Layer_3_Rough,  n_out25p0.xy);
		vec4 aoMap = texture(Layer_3_AO,  n_out25p0.xy);
		mat4 packedOriginal = mat4(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0));
		packedOriginal[0].rgb = colorMap.rgb;
		packedOriginal[1].r = dispMap.r;
		packedOriginal[2].rg = normalMap.rg;
		packedOriginal[3].r = roughMap.r;
		packedOriginal[3].b = aoMap.r;
		n_out21p1 = packedOriginal;
		vec2 newUv = rotatedUV(n_out25p0.xy, n_in21p7, n_in21p6);vec4 colorMapRot = texture(Layer_3, newUv);
		vec4 dispMapRot = texture(Layer_3_Dis,  newUv);
		vec4 normalMapRot = texture(Layer_3_Normal,  newUv);
		vec4 roughMapRot = texture(Layer_3_Rough,  newUv);
		vec4 aoMapRot = texture(Layer_3_AO,  newUv);
		mat4 packedMixed = mat4(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0));
		packedMixed[0].rgb = colorMapRot.rgb;
		packedMixed[1].r = dispMapRot.r;
		packedMixed[2].rg = normalMapRot.rg;
		packedMixed[3].r = roughMapRot.r;
		packedMixed[3].b = aoMapRot.r;
		packedMixed[0] = mix(packedOriginal[0], packedMixed[0],  n_out30p0);
		packedMixed[1] = mix(packedOriginal[1], packedMixed[1],  n_out30p0);
		packedMixed[2] = mix(packedOriginal[2], packedMixed[2],  n_out30p0);
		packedMixed[3] = mix(packedOriginal[3], packedMixed[3],  n_out30p0);
		n_out21p1 = packedOriginal;
		n_out21p0 = packedMixed;
	}


	mat4 n_out23p0;
// DepthBlending3D:23
	bool n_in23p4 = false;
	{
		vec3 tex1 = n_out22p0[0].rgb;
		vec3 tex2 = n_out21p0[0].rgb;
		float avg1 = (tex1.r + tex1.g + tex1.b) / 3.0f;
		float avg2 = (tex2.r + tex2.g + tex2.b) / 3.0f;
		vec3 bump1 = n_out22p0[2].rgb;
		vec3 bump2 = n_out21p0[2].rgb;
		bump1.xy = bump1.xy / bump1.z;
		bump2.xy = bump2.xy / bump2.z;
		bump1.z = 1.0;
		bump2.z = 1.0;
		if(n_in23p4 == false) { 
			avg1 = n_out22p0[1].r;
			avg2 = n_out21p0[1].r;
		}
		mat4 result = mat4(vec4(0f,0f,0f,0f),vec4(0f,0f,0f,0f),vec4(0f,0f,0f,0f),vec4(0f,0f,0f,0f));
		result[0].rgb = HeightLerp(n_out31p0, n_out22p0[0].rgb, avg1, n_out21p0[0].rgb, avg2, n_out34p1);
		result[1].rgb = HeightLerp(n_out31p0, n_out22p0[1].rgb, avg1, n_out21p0[1].rgb, avg2, n_out34p1);
		result[2].rgb = mix( n_out22p0[2].rgb,  n_out21p0[2].rgb, n_out34p1);
		result[3].rgb = HeightLerp(n_out31p0, n_out22p0[3].rgb, avg1, n_out21p0[3].rgb, avg2, n_out34p1);
		n_out23p0 = result;
	}


	vec3 n_out24p0;
	float n_out24p1;
	vec3 n_out24p2;
	float n_out24p3;
	float n_out24p4;
// TextureUnpack3D:24
	{
		n_out24p0 = n_out23p0[0].rgb;
		n_out24p1 = n_out23p0[1].r;
		n_out24p2 = vec3(n_out23p0[2].r, n_out23p0[2].g, n_out23p0[2].b);
		n_out24p3 = n_out23p0[3].r;
		n_out24p4 = n_out23p0[3].b;
	}


	vec3 n_out26p0;
	vec3 n_out26p1;
// TerrainMaterial3D:26
	{
		vec4 material = texture(terrainDefaultMaterial, UV);
		n_out26p0 = genInspectorHighliteTerrain(BrushColor, BrushData0, BrushData1, CAMERA_MATRIX, VERTEX);
		n_out26p1 = material.rgb;
	}


// FloatConstant:35
	float n_out35p0 = 1.000000;


// Output:0
	ALBEDO = n_out24p0;
	ROUGHNESS = n_out24p3;
	EMISSION = n_out26p0;
	AO = n_out24p4;
	NORMAL_MAP = n_out24p2;
	NORMAL_MAP_DEPTH = n_out35p0;


}

void light() {
// VectorConstant:2
	vec3 n_out2p0 = vec3(0.500000, 0.500000, 0.500000);


// Output:0
	DIFFUSE_LIGHT = n_out2p0;


}
"
graph_offset = Vector2(1088.63, -214.445)
engine_version = {
"major": 4,
"minor": 0
}
modes/depth_draw = 1
nodes/vertex/0/position = Vector2(1120, -320)
nodes/vertex/2/node = SubResource( "33" )
nodes/vertex/2/position = Vector2(560, -280)
nodes/vertex/connections = PackedInt32Array(2, 0, 0, 0, 2, 4, 0, 3, 2, 3, 0, 2, 2, 2, 0, 1)
nodes/fragment/0/position = Vector2(2420, -120)
nodes/fragment/2/node = SubResource( "11" )
nodes/fragment/2/position = Vector2(-280, -120)
nodes/fragment/3/node = SubResource( "21" )
nodes/fragment/3/position = Vector2(-100, -120)
nodes/fragment/6/node = SubResource( "28" )
nodes/fragment/6/position = Vector2(-460, -120)
nodes/fragment/7/node = SubResource( "29" )
nodes/fragment/7/position = Vector2(80, -120)
nodes/fragment/8/node = SubResource( "30" )
nodes/fragment/8/position = Vector2(280, -120)
nodes/fragment/9/node = SubResource( "31" )
nodes/fragment/9/position = Vector2(280, 140)
nodes/fragment/10/node = SubResource( "1" )
nodes/fragment/10/position = Vector2(80, 140)
nodes/fragment/11/node = SubResource( "2" )
nodes/fragment/11/position = Vector2(-100, 140)
nodes/fragment/12/node = SubResource( "3" )
nodes/fragment/12/position = Vector2(-280, 140)
nodes/fragment/13/node = SubResource( "4" )
nodes/fragment/13/position = Vector2(-460, 140)
nodes/fragment/14/node = SubResource( "5" )
nodes/fragment/14/position = Vector2(-280, 360)
nodes/fragment/15/node = SubResource( "6" )
nodes/fragment/15/position = Vector2(-100, 360)
nodes/fragment/16/node = SubResource( "7" )
nodes/fragment/16/position = Vector2(80, 360)
nodes/fragment/17/node = SubResource( "8" )
nodes/fragment/17/position = Vector2(280, 360)
nodes/fragment/18/node = SubResource( "9" )
nodes/fragment/18/position = Vector2(-460, 360)
nodes/fragment/19/node = SubResource( "10" )
nodes/fragment/19/position = Vector2(660, -180)
nodes/fragment/20/node = SubResource( "12" )
nodes/fragment/20/position = Vector2(820, 160)
nodes/fragment/21/node = SubResource( "13" )
nodes/fragment/21/position = Vector2(820, 420)
nodes/fragment/22/node = SubResource( "14" )
nodes/fragment/22/position = Vector2(1280, -180)
nodes/fragment/23/node = SubResource( "15" )
nodes/fragment/23/position = Vector2(1480, -80)
nodes/fragment/24/node = SubResource( "16" )
nodes/fragment/24/position = Vector2(1760, -100)
nodes/fragment/25/node = SubResource( "17" )
nodes/fragment/25/position = Vector2(260, 80)
nodes/fragment/26/node = SubResource( "18" )
nodes/fragment/26/position = Vector2(1820, -240)
nodes/fragment/28/node = SubResource( "19" )
nodes/fragment/28/position = Vector2(540, 60)
nodes/fragment/29/node = SubResource( "20" )
nodes/fragment/29/position = Vector2(520, 300)
nodes/fragment/30/node = SubResource( "22" )
nodes/fragment/30/position = Vector2(320, 580)
nodes/fragment/31/node = SubResource( "23" )
nodes/fragment/31/position = Vector2(1220, 80)
nodes/fragment/33/node = SubResource( "24" )
nodes/fragment/33/position = Vector2(-100, 80)
nodes/fragment/34/node = SubResource( "25" )
nodes/fragment/34/position = Vector2(960, -60)
nodes/fragment/35/node = SubResource( "26" )
nodes/fragment/35/position = Vector2(1720, 40)
nodes/fragment/connections = PackedInt32Array(8, 2, 19, 4, 7, 2, 19, 3, 3, 2, 19, 2, 2, 2, 19, 1, 6, 2, 19, 0, 9, 2, 20, 4, 10, 2, 20, 3, 11, 2, 20, 2, 12, 2, 20, 1, 13, 2, 20, 0, 17, 2, 21, 4, 16, 2, 21, 3, 15, 2, 21, 2, 14, 2, 21, 1, 18, 2, 21, 0, 22, 0, 23, 0, 21, 0, 23, 1, 25, 0, 19, 5, 25, 0, 20, 5, 25, 0, 21, 5, 28, 0, 19, 8, 29, 0, 20, 8, 30, 0, 21, 8, 31, 0, 22, 3, 31, 0, 23, 3, 33, 0, 25, 0, 23, 0, 24, 0, 24, 2, 0, 8, 35, 0, 0, 9, 24, 3, 0, 3, 24, 4, 0, 6, 19, 0, 22, 0, 20, 0, 22, 1, 34, 1, 23, 2, 34, 3, 22, 2, 24, 0, 0, 0, 26, 0, 0, 5)
nodes/light/0/position = Vector2(440, 160)
nodes/light/2/node = SubResource( "32" )
nodes/light/2/position = Vector2(120, 160)
nodes/light/connections = PackedInt32Array(2, 0, 0, 0)

[resource]
shader = SubResource( "34" )
shader_param/terrainUvScale = null
shader_param/terrainUvOffset = null
shader_param/terrainChunkSize = null
shader_param/terrainNextLodChunkSize = null
shader_param/terrainNeighborLod = null
shader_param/terrainCurrentLodLevel = null
shader_param/terrainSmoothing = null
shader_param/BrushData0 = null
shader_param/BrushData1 = null
shader_param/BrushColor = null
shader_param/Layer_1 = ExtResource( "8" )
shader_param/Layer_1_Dis = ExtResource( "10" )
shader_param/Layer_1_Normal = ExtResource( "11" )
shader_param/Layer_1_Rough = ExtResource( "12" )
shader_param/Layer_1_AO = ExtResource( "9" )
shader_param/Layer_2 = ExtResource( "17" )
shader_param/Layer_2_Dis = ExtResource( "13" )
shader_param/Layer_2_Normal = ExtResource( "15" )
shader_param/Layer_2_Rough = ExtResource( "16" )
shader_param/Layer_2_AO = ExtResource( "14" )
shader_param/Layer_3 = ExtResource( "20" )
shader_param/Layer_3_Dis = ExtResource( "19" )
shader_param/Layer_3_Normal = ExtResource( "18" )
shader_param/Layer_3_Rough = ExtResource( "21" )
shader_param/Layer_3_AO = ExtResource( "22" )
